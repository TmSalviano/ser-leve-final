// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // You can replace this with "postgresql", "mysql", etc.
  url      = env("DATABASE_URL") // Ensure you have the DATABASE_URL in your .env file
}

model Usuario {
  Id            Int       @id @default(autoincrement())
  Nome          String?
  NameTag       String    @unique
  Email         String    @unique
  Password      String
  ProfilePicture String?
  Biografy      String?
  Following     Follow[]  @relation("Following") 
  Followers     Follow[]  @relation("Followers") 
  DarkMode      Boolean   @default(false)
  IsLoggedIn    Boolean   @default(false)
  Receitas      Receita[] @relation("UsuarioReceitas") // Relation to Receita

    SentNotifications Notificacao[] @relation("SentNotifications") // Reverse relation for sent notifications
  ReceivedNotifications Notificacao[] @relation("ReceivedNotifications") // Reverse relation for received notifications

}

model Receita {
  Id          Int      @id @default(autoincrement())
  UsuarioId   Int      // Foreign key for the Usuario model
  Titulo      String
  Resumo      String
  Descricao   String
  Imagem      String?
  Criado      DateTime @default(now()) // Timestamp of creation
  Usuario     Usuario @relation("UsuarioReceitas", fields: [UsuarioId], references: [Id]) // Relating back to the Usuario

  @@index([UsuarioId, Criado]) // Index to optimize queries by UsuarioId and Created Time
}

model Follow {
  FollowerId  Int
  FollowingId Int
  Follower    Usuario @relation("Followers", fields: [FollowerId], references: [Id])
  Following   Usuario @relation("Following", fields: [FollowingId], references: [Id])

  @@id([FollowerId, FollowingId]) // Composite primary key ensures unique pairs
}

model Notificacao {
  Id        Int      @id @default(autoincrement())
  Mensagem  String   // The content of the notification
  SentBy    Int      // Foreign key for the user who sent the notification
  SendTo    Int      // Foreign key for the user who will receive the notification
  Criado    DateTime @default(now()) // Timestamp for when the notification was created

  SentByUser Usuario @relation("SentNotifications", fields: [SentBy], references: [Id])
  SendToUser Usuario @relation("ReceivedNotifications", fields: [SendTo], references: [Id])
}


